A Tree is an undirected, connected, acylic graph

Binary Tree
tree data structure in which each node has at most two children, which are referred to as the left child and right child
Full Tree: a tree in which every node has either 0 or 2 children
Perfect Binary Tree: a binary tree in which all interior nodes have two children and all leave have the same depth
Complete Tree: a binary tree in which every level except possibly the last is full and all nodes in the last level are as far left as possible

Binary Search Tree
maintains the property that the value in each node must be greater than or equal to any value stored in the left sub-tree, and less than or equal to any value stored in the right sub-tree
Time Complexity:
Access: O(log(n))
Search: O(log(n))
Insert: O(log(n))
Remove: O(log(n))

Trie
aka radix or prefix tree
is a kind of search tree that is used to store a dynamic set or associative array where the keys are usually Strings. 
No node in the tree stores the key associated with that node; 
instead, its position in the tree defines the key with which it is associated. 
All the descendants of a node have a common prefix of the String associated with that node, and the root is associated with the empty String.

Heap
satisfies the heap property: 
if A is a parent node of B, then the key (the value) of node A is ordered with respect to the key of node B with the same ordering applying across the entire heap. 
A heap can be classified further as either a "max heap" or a "min heap". 
In a max heap, the keys of parent nodes are always greater than or equal to those of the children and the highest key is in the root node.
In a min heap, the keys of parent nodes are less than or equal to those of the children and the lowest key is in the root node
Time Complexity:
Access Max / Min: O(1)
Insert: O(log(n))
Remove Max / Min: O(log(n))

